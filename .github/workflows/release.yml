name: Build and Release Packages
on:
  push:
    tags:
      - 'v*'

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.caching=true

jobs:
  # Build CLI packages for all platforms using matrix strategy
  build-cli:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: Linux
            packages: "JAR + DEB"
            build-tasks: "cliJar packageCliDeb"
            artifacts: |
              build/libs/manga-combiner-cli-*.jar
              build/distributions/manga-combiner-cli-*.deb
          - os: windows-latest
            platform: Windows
            packages: "JAR + MSI + Portable EXE"
            build-tasks: "cliJar packageCliWindows packageCliWindowsPortable"
            artifacts: |
              build/libs/manga-combiner-cli-*.jar
              build/cli-windows/manga-combiner-cli-*.msi
              build/cli-windows-portable/manga-combiner-cli-portable-*.zip
          - os: macos-latest
            platform: macOS
            packages: "JAR (Universal)"
            build-tasks: "cliJar"
            artifacts: "build/libs/manga-combiner-cli-*.jar"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-cleanup: false

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Install Linux DEB packaging tools
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "Installing DEB packaging tools for Linux..."
          sudo apt-get update
          sudo apt-get install -y dpkg-dev fakeroot
          echo "DEB packaging tools installed successfully"

      - name: Build CLI packages for ${{ matrix.platform }}
        run: |
          echo "=========================================="
          echo "Building ${{ matrix.packages }} for ${{ matrix.platform }}"
          echo "Build tasks: ${{ matrix.build-tasks }}"
          echo "=========================================="
          ./gradlew ${{ matrix.build-tasks }} --info --stacktrace --no-daemon
          echo "CLI build completed successfully for ${{ matrix.platform }}"

      - name: Package Windows Portable (Enhanced)
        if: matrix.platform == 'Windows'
        shell: bash
        run: |
          echo "=========================================="
          echo "Enhanced Windows Portable Packaging"
          echo "=========================================="
          
          # Check if the portable directory exists
          if [ -d "build/cli-windows-portable" ]; then
            echo "Found CLI Windows portable directory"
            cd build/cli-windows-portable
            ls -la
          
            # Find the actual directory name (might not be exactly 'manga-combiner-cli')
            PORTABLE_DIR=$(find . -type d -name "*manga-combiner*" | head -1)
            if [ -n "$PORTABLE_DIR" ]; then
              echo "Found portable directory: $PORTABLE_DIR"
          
              # Create a properly named zip file with version info
              TAG_NAME="${{ github.ref_name }}"
              VERSION="${TAG_NAME#v}"  # Remove 'v' prefix if present
              ZIP_NAME="manga-combiner-cli-portable-${VERSION}-windows.zip"
          
              echo "Creating zip archive: $ZIP_NAME"
          
              # Use PowerShell on Windows for reliable zip creation
              powershell -Command "
                Write-Host 'Creating zip archive with PowerShell...'
                if (Test-Path '$PORTABLE_DIR') {
                  Compress-Archive -Path '$PORTABLE_DIR' -DestinationPath '$ZIP_NAME' -Force -CompressionLevel Optimal
                  Write-Host 'Zip archive created successfully'
                  Get-ChildItem -Name '*.zip'
                } else {
                  Write-Error 'Portable directory not found: $PORTABLE_DIR'
                  exit 1
                }
              "
          
              echo "Verifying zip file creation:"
              ls -la *.zip
              cd ../..
            else
              echo "ERROR: No manga-combiner directory found in portable build"
              ls -la build/cli-windows-portable/
              exit 1
            fi
          else
            echo "ERROR: Windows portable directory not found at build/cli-windows-portable"
            echo "Available directories in build/:"
            ls -la build/ 2>/dev/null || echo "Build directory not found"
            exit 1
          fi
          
          echo "Windows portable packaging completed"

      - name: Comprehensive CLI Artifact Verification
        shell: bash
        run: |
          echo "=========================================="
          echo "CLI Artifact Verification for ${{ matrix.platform }}"
          echo "=========================================="
          
          # Overall build directory structure
          echo "=== Build Directory Check ==="
          if [ -d "build" ]; then
            echo "✅ Build directory exists"
            ls -la build/ || true
            echo ""
            echo "Contents with manga-combiner pattern:"
            ls -la build/*manga-combiner* 2>/dev/null || echo "No manga-combiner files in build root"
          else
            echo "❌ ERROR: Build directory not found!"
            exit 1
          fi
          echo ""
          
          # JAR files verification
          echo "=== JAR Files Verification ==="
          if [ -d "build/libs" ]; then
            echo "✅ Libs directory exists"
            ls -la build/libs/ || true
            echo ""
            if ls build/libs/manga-combiner-cli-*.jar 1> /dev/null 2>&1; then
              JAR_COUNT=$(ls build/libs/manga-combiner-cli-*.jar 2>/dev/null | wc -l)
              echo "✅ Found $JAR_COUNT CLI JAR file(s):"
              ls -lh build/libs/manga-combiner-cli-*.jar 2>/dev/null || true
            else
              echo "❌ No CLI JAR files found!"
              echo "Available JAR files in libs:"
              ls -la build/libs/*.jar 2>/dev/null || echo "No JAR files at all"
            fi
          else
            echo "❌ No libs directory found"
          fi
          echo ""
          
          # Platform-specific verification
          if [ "${{ matrix.platform }}" = "Linux" ]; then
            echo "=== Linux DEB Files Verification ==="
            if [ -d "build/distributions" ]; then
              echo "✅ Distributions directory exists"
              ls -la build/distributions/ || true
              echo ""
              if ls build/distributions/manga-combiner-cli-*.deb 1> /dev/null 2>&1; then
                DEB_COUNT=$(ls build/distributions/manga-combiner-cli-*.deb 2>/dev/null | wc -l)
                echo "✅ Found $DEB_COUNT CLI DEB file(s):"
                ls -lh build/distributions/manga-combiner-cli-*.deb 2>/dev/null || true
              else
                echo "❌ No CLI DEB files found!"
                echo "Available DEB files:"
                ls -la build/distributions/*.deb 2>/dev/null || echo "No DEB files at all"
              fi
            else
              echo "❌ No distributions directory found"
            fi
          fi
          
          if [ "${{ matrix.platform }}" = "Windows" ]; then
            echo "=== Windows CLI MSI Files Verification ==="
            if [ -d "build/cli-windows" ]; then
              echo "✅ CLI Windows directory exists"
              ls -la build/cli-windows/ || true
              echo ""
              if ls build/cli-windows/*.msi 1> /dev/null 2>&1; then
                MSI_COUNT=$(ls build/cli-windows/*.msi 2>/dev/null | wc -l)
                echo "✅ Found $MSI_COUNT CLI MSI file(s):"
                ls -lh build/cli-windows/*.msi 2>/dev/null || true
              else
                echo "❌ No CLI MSI files found in build/cli-windows!"
              fi
            else
              echo "❌ CLI Windows directory not found"
            fi
          
            echo ""
            echo "=== Windows Portable ZIP Files Verification ==="
            if [ -d "build/cli-windows-portable" ]; then
              echo "✅ CLI Windows Portable directory exists"
              ls -la build/cli-windows-portable/ || true
              echo ""
              if ls build/cli-windows-portable/*.zip 1> /dev/null 2>&1; then
                ZIP_COUNT=$(ls build/cli-windows-portable/*.zip 2>/dev/null | wc -l)
                echo "✅ Found $ZIP_COUNT portable ZIP file(s):"
                ls -lh build/cli-windows-portable/*.zip 2>/dev/null || true
              else
                echo "❌ No portable ZIP files found!"
              fi
            else
              echo "❌ CLI Windows Portable directory not found"
            fi
          fi
          
          echo ""
          echo "=== Summary of Expected Artifacts ==="
          echo "Checking artifact patterns for ${{ matrix.platform }}:"
          
          # Handle multiline matrix.artifacts properly
          ARTIFACTS="${{ matrix.artifacts }}"
          echo "$ARTIFACTS" | while IFS= read -r pattern; do
            if [ -n "$pattern" ] && [ "$pattern" != "" ]; then
              echo "Pattern: $pattern"
              if ls $pattern 1> /dev/null 2>&1; then
                MATCHES=$(ls $pattern 2>/dev/null | wc -l)
                echo "  ✅ $MATCHES file(s) match this pattern"
                ls -lh $pattern 2>/dev/null || true
              else
                echo "  ❌ No files match this pattern"
              fi
            fi
          done
          
          echo ""
          echo "=========================================="
          echo "✅ CLI artifact verification completed successfully"

      - name: Upload CLI Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: CLI-${{ matrix.platform }}-${{ github.ref_name }}
          path: ${{ matrix.artifacts }}
          retention-days: 30
          if-no-files-found: error

  # Build desktop installers for macOS, Windows, and Linux (DEB only)
  build-desktop:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            platform: macOS
            artifacts: "build/compose/binaries/main/**/*.dmg"
          - os: ubuntu-22.04
            platform: Linux
            artifacts: "build/compose/binaries/main/**/*.deb"
          - os: windows-latest
            platform: Windows
            artifacts: "build/compose/binaries/main/**/*.msi"
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-cleanup: false

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-22.04'
        run: |
          echo "Installing Linux desktop build dependencies..."
          sudo apt-get update
          sudo apt-get install -y fakeroot dpkg-dev
          echo "Linux dependencies installed successfully"

      - name: Build Desktop Installers
        run: |
          echo "=========================================="
          echo "Building desktop installer for ${{ matrix.platform }}"
          echo "=========================================="
          ./gradlew packageDistributionForCurrentOS --info --stacktrace --no-daemon
          echo "Desktop build completed successfully for ${{ matrix.platform }}"

      - name: Enhanced Desktop Artifact Verification
        shell: bash
        run: |
          echo "=========================================="
          echo "Desktop Artifact Verification for ${{ matrix.platform }}"
          echo "=========================================="
          
          echo "=== Build Directory Check ==="
          if [ -d "build" ]; then
            echo "✅ Build directory exists"
            ls -la build/ || true
          else
            echo "❌ ERROR: Build directory not found!"
            exit 1
          fi
          echo ""
          
          echo "=== Compose Directory Structure ==="
          if [ -d "build/compose" ]; then
            echo "✅ Compose directory exists"
            ls -la build/compose/ || true
            echo ""
            echo "Compose subdirectories:"
            ls -la build/compose/*/ 2>/dev/null || echo "No subdirectories found"
          else
            echo "❌ ERROR: Compose directory not found!"
            exit 1
          fi
          echo ""
          
          echo "=== Desktop Installer Files ==="
          INSTALLER_PATTERN="build/compose/binaries/main"
          if [ -d "$INSTALLER_PATTERN" ]; then
            echo "✅ Found installer directory: $INSTALLER_PATTERN"
            ls -la "$INSTALLER_PATTERN" || true
            echo ""
          
            # Check for platform-specific installers with safe commands
            if [ "${{ matrix.platform }}" = "macOS" ]; then
              echo "=== macOS DMG Files ==="
              if ls "$INSTALLER_PATTERN"/*.dmg 1> /dev/null 2>&1; then
                DMG_FILES=$(ls "$INSTALLER_PATTERN"/*.dmg 2>/dev/null | wc -l)
                echo "✅ DMG files found: $DMG_FILES"
                ls -lh "$INSTALLER_PATTERN"/*.dmg 2>/dev/null || true
              else
                echo "❌ No DMG files found in $INSTALLER_PATTERN"
              fi
            elif [ "${{ matrix.platform }}" = "Windows" ]; then
              echo "=== Windows Desktop MSI Files ==="
              if ls "$INSTALLER_PATTERN"/*.msi 1> /dev/null 2>&1; then
                MSI_FILES=$(ls "$INSTALLER_PATTERN"/*.msi 2>/dev/null | wc -l)
                echo "✅ Desktop MSI files found: $MSI_FILES"
                ls -lh "$INSTALLER_PATTERN"/*.msi 2>/dev/null || true
              else
                echo "❌ No MSI files found in $INSTALLER_PATTERN"
              fi
            elif [ "${{ matrix.platform }}" = "Linux" ]; then
              echo "=== Linux Desktop DEB Files ==="
              if ls "$INSTALLER_PATTERN"/*.deb 1> /dev/null 2>&1; then
                DEB_FILES=$(ls "$INSTALLER_PATTERN"/*.deb 2>/dev/null | wc -l)
                echo "✅ Desktop DEB files found: $DEB_FILES"
                ls -lh "$INSTALLER_PATTERN"/*.deb 2>/dev/null || true
              else
                echo "❌ No DEB files found in $INSTALLER_PATTERN"
              fi
            fi
          else
            echo "❌ ERROR: Installer directory not found: $INSTALLER_PATTERN"
            echo "Available directories in build/compose/binaries/:"
            ls -la build/compose/binaries/ 2>/dev/null || echo "binaries directory not found"
            exit 1
          fi
          
          echo ""
          echo "=========================================="
          echo "✅ Desktop artifact verification completed successfully"

      - name: Upload Desktop Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Desktop-${{ matrix.platform }}-${{ github.ref_name }}
          path: ${{ matrix.artifacts }}
          retention-days: 30
          if-no-files-found: error

  # Build Android AAB and APK
  build-android:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-cleanup: false

      - name: Decode Keystore & Create Properties File
        run: |
          echo "Setting up Android signing configuration..."
          echo "${{ secrets.RELEASE_KEYSTORE_BASE64 }}" | base64 --decode > my-release-key.keystore
          echo "storeFile=../my-release-key.keystore" > keystore.properties
          echo "storePassword=${{ secrets.RELEASE_STORE_PASSWORD }}" >> keystore.properties
          echo "keyAlias=${{ secrets.RELEASE_KEY_ALIAS }}" >> keystore.properties
          echo "keyPassword=${{ secrets.RELEASE_KEY_PASSWORD }}" >> keystore.properties
          echo "Android signing configuration created successfully"

      - name: Build Android App Bundle and APK
        run: |
          echo "=========================================="
          echo "Building Android packages"
          echo "=========================================="
          ./gradlew bundleRelease assembleRelease --info --stacktrace --no-daemon
          echo "Android build completed successfully"

      - name: Enhanced Android Artifact Verification
        run: |
          echo "=========================================="
          echo "Android Artifact Verification"
          echo "=========================================="
          
          echo "=== Android APK Files ==="
          if ls **/build/outputs/apk/release/*.apk 1> /dev/null 2>&1; then
            APK_COUNT=$(ls **/build/outputs/apk/release/*.apk 2>/dev/null | wc -l)
            echo "✅ Total APK files found: $APK_COUNT"
            ls -lh **/build/outputs/apk/release/*.apk 2>/dev/null || true
          else
            echo "❌ No APK files found!"
            echo "Checking for APK files in any location:"
            if ls **/*.apk 1> /dev/null 2>&1; then
              ls -lh **/*.apk 2>/dev/null || true
            else
              echo "No APK files found anywhere"
            fi
          fi
          echo ""
          
          echo "=== Android AAB Files ==="
          if ls **/build/outputs/bundle/release/*.aab 1> /dev/null 2>&1; then
            AAB_COUNT=$(ls **/build/outputs/bundle/release/*.aab 2>/dev/null | wc -l)
            echo "✅ Total AAB files found: $AAB_COUNT"
            ls -lh **/build/outputs/bundle/release/*.aab 2>/dev/null || true
          else
            echo "❌ No AAB files found!"
            echo "Checking for AAB files in any location:"
            if ls **/*.aab 1> /dev/null 2>&1; then
              ls -lh **/*.aab 2>/dev/null || true
            else
              echo "No AAB files found anywhere"
            fi
          fi
          echo ""
          
          echo "=== Android Build Output Structure ==="
          if [ -d "composeApp/build/outputs" ]; then
            echo "✅ Found composeApp build outputs:"
            ls -la composeApp/build/outputs/ || true
            echo ""
            echo "APK directory:"
            ls -la composeApp/build/outputs/apk/ 2>/dev/null || echo "No APK directory"
            echo ""
            echo "Bundle directory:"
            ls -la composeApp/build/outputs/bundle/ 2>/dev/null || echo "No bundle directory"
          else
            echo "❌ No composeApp/build/outputs directory found"
            echo "Looking for any build/outputs directories:"
            ls -la */build/outputs/ 2>/dev/null || echo "No build/outputs directories found"
          fi
          
          echo ""
          echo "=========================================="
          echo "✅ Android artifact verification completed successfully"

      - name: Upload Android Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Android-${{ github.ref_name }}
          path: |
            **/build/outputs/bundle/release/*.aab
            **/build/outputs/apk/release/*.apk
          retention-days: 30
          if-no-files-found: error

  # Create GitHub Release after all builds succeed
  create-release:
    needs: [build-cli, build-desktop, build-android]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Comprehensive Artifact Analysis
        run: |
          echo "=========================================="
          echo "Comprehensive Artifact Analysis"
          echo "=========================================="
          
          echo "=== Downloaded Artifact Directory Structure ==="
          if [ -d "artifacts" ]; then
            echo "✅ Artifacts directory exists"
            ls -la artifacts/ || true
            echo ""
            echo "Artifact subdirectories:"
            ls -la artifacts/*/ 2>/dev/null || echo "No subdirectories found"
          else
            echo "❌ ERROR: No artifacts directory found!"
            exit 1
          fi
          echo ""
          
          echo "=== Artifact Summary by Type ==="
          
          echo "--- JAR files ---"
          if ls artifacts/**/*.jar 1> /dev/null 2>&1; then
            JAR_COUNT=$(ls artifacts/**/*.jar 2>/dev/null | wc -l)
            echo "✅ Found $JAR_COUNT JAR file(s):"
            ls -lh artifacts/**/*.jar 2>/dev/null | sort || true
          else
            echo "❌ No JAR files found"
          fi
          echo ""
          
          echo "--- DEB files ---"
          if ls artifacts/**/*.deb 1> /dev/null 2>&1; then
            DEB_COUNT=$(ls artifacts/**/*.deb 2>/dev/null | wc -l)
            echo "✅ Found $DEB_COUNT DEB file(s):"
            ls -lh artifacts/**/*.deb 2>/dev/null | sort || true
          else
            echo "❌ No DEB files found"
          fi
          echo ""
          
          echo "--- MSI files ---"
          if ls artifacts/**/*.msi 1> /dev/null 2>&1; then
            MSI_COUNT=$(ls artifacts/**/*.msi 2>/dev/null | wc -l)
            echo "✅ Found $MSI_COUNT MSI file(s):"
            ls -lh artifacts/**/*.msi 2>/dev/null | sort || true
          else
            echo "❌ No MSI files found"
          fi
          echo ""
          
          echo "--- ZIP files ---"
          if ls artifacts/**/*.zip 1> /dev/null 2>&1; then
            ZIP_COUNT=$(ls artifacts/**/*.zip 2>/dev/null | wc -l)
            echo "✅ Found $ZIP_COUNT ZIP file(s):"
            ls -lh artifacts/**/*.zip 2>/dev/null | sort || true
          else
            echo "❌ No ZIP files found"
          fi
          echo ""
          
          echo "--- DMG files ---"
          if ls artifacts/**/*.dmg 1> /dev/null 2>&1; then
            DMG_COUNT=$(ls artifacts/**/*.dmg 2>/dev/null | wc -l)
            echo "✅ Found $DMG_COUNT DMG file(s):"
            ls -lh artifacts/**/*.dmg 2>/dev/null | sort || true
          else
            echo "❌ No DMG files found"
          fi
          echo ""
          
          echo "--- APK files ---"
          if ls artifacts/**/*.apk 1> /dev/null 2>&1; then
            APK_COUNT=$(ls artifacts/**/*.apk 2>/dev/null | wc -l)
            echo "✅ Found $APK_COUNT APK file(s):"
            ls -lh artifacts/**/*.apk 2>/dev/null | sort || true
          else
            echo "❌ No APK files found"
          fi
          echo ""
          
          echo "--- AAB files ---"
          if ls artifacts/**/*.aab 1> /dev/null 2>&1; then
            AAB_COUNT=$(ls artifacts/**/*.aab 2>/dev/null | wc -l)
            echo "✅ Found $AAB_COUNT AAB file(s):"
            ls -lh artifacts/**/*.aab 2>/dev/null | sort || true
          else
            echo "❌ No AAB files found"
          fi
          echo ""
          
          echo "=== File Count Summary ==="
          JAR_TOTAL=$(ls artifacts/**/*.jar 2>/dev/null | wc -l)
          DEB_TOTAL=$(ls artifacts/**/*.deb 2>/dev/null | wc -l)
          MSI_TOTAL=$(ls artifacts/**/*.msi 2>/dev/null | wc -l)
          ZIP_TOTAL=$(ls artifacts/**/*.zip 2>/dev/null | wc -l)
          DMG_TOTAL=$(ls artifacts/**/*.dmg 2>/dev/null | wc -l)
          APK_TOTAL=$(ls artifacts/**/*.apk 2>/dev/null | wc -l)
          AAB_TOTAL=$(ls artifacts/**/*.aab 2>/dev/null | wc -l)
          
          echo "📊 Total file counts:"
          echo "  JAR files: $JAR_TOTAL"
          echo "  DEB files: $DEB_TOTAL"
          echo "  MSI files: $MSI_TOTAL"
          echo "  ZIP files: $ZIP_TOTAL"
          echo "  DMG files: $DMG_TOTAL"
          echo "  APK files: $APK_TOTAL"
          echo "  AAB files: $AAB_TOTAL"
          
          TOTAL_FILES=$((JAR_TOTAL + DEB_TOTAL + MSI_TOTAL + ZIP_TOTAL + DMG_TOTAL + APK_TOTAL + AAB_TOTAL))
          echo "  📦 Total artifacts: $TOTAL_FILES"
          
          echo ""
          echo "=========================================="
          echo "✅ Comprehensive artifact analysis completed successfully"

      - name: Delete existing release if it exists
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Attempting to delete existing release: ${{ github.ref_name }}"
          gh release delete ${{ github.ref_name }} --yes || echo "No existing release found or failed to delete"

      - name: Create enhanced release notes
        run: |
          cat > release_notes.md << 'EOF_MARKER'
          ## MangaCombiner ${{ github.ref_name }}
          
          ### 📦 Downloads
          
          **🖥️ Desktop Applications:**
          - **Windows**: Download `MangaCombiner-*.msi` (desktop installer with GUI)
          - **macOS**: Download `MangaCombiner-*.dmg` (desktop installer with GUI)
          - **Linux (Debian/Ubuntu)**: Download desktop `MangaCombiner-*.deb` package (GUI application)
          
          **⚡ Command Line Interface:**
          - **Cross-platform JAR**: Download `manga-combiner-cli-*.jar` (requires Java 17+)
          - **Linux System Package**: Download CLI `manga-combiner-cli-*.deb` for system-wide installation
          - **Windows CLI Installer**: Download CLI `manga-combiner-cli-*.msi` for system-wide installation
          - **Windows Portable**: Download `manga-combiner-cli-portable-*-windows.zip` (no installation needed)
          
          **📱 Android:**
          - **Play Store Distribution**: Use `manga-combiner-kmp-release.aab` for store uploads
          - **Direct Installation**: Use `manga-combiner-kmp-release-unsigned.apk` for manual installation
          
          ### 🚀 Installation Instructions
          
          **CLI - System Installation (Debian/Ubuntu):**
          ```bash
          sudo dpkg -i manga-combiner-cli-*.deb
          sudo apt-get install -f  # Install dependencies if needed
          manga-combiner-cli --help
          ```
          
          **CLI - System Installation (Windows):**
          ```cmd
          # Double-click the CLI MSI installer or run:
          msiexec /i manga-combiner-cli-*.msi
          # Then use from anywhere:
          manga-combiner-cli --help
          ```
          
          **CLI - Portable (Windows):**
          ```cmd
          # Extract the portable zip file and run:
          .\manga-combiner-cli\manga-combiner-cli.exe --help
          ```
          
          **Desktop - System Installation (Debian/Ubuntu):**
          ```bash
          sudo dpkg -i MangaCombiner-*.deb
          sudo apt-get install -f  # Install dependencies if needed
          # Launch from applications menu or command line
          ```
          
          **CLI - Portable JAR (Any OS with Java):**
          ```bash
          java -jar manga-combiner-cli-*.jar --help
          ```
          
          ### 🔧 System Requirements
          - **Desktop Apps**: Platform-specific (includes bundled Java runtime)
          - **CLI JAR**: Java 17 or higher (any operating system)
          - **CLI DEB**: Java 17+ (automatically installed as dependency on Debian/Ubuntu)
          - **CLI Windows**: No Java required (bundled runtime included)
          - **Android**: Android 8.0 (API level 26) or higher
          - **Linux DEB**: Debian 10+ or Ubuntu 18.04+ (tested on Debian 12 bookworm)
          
          ### 📝 File Descriptions
          
          | File Type | Purpose | Installation |
          |-----------|---------|--------------|
          | manga-combiner-cli-*.jar | Cross-platform CLI | Requires Java 17+ |
          | manga-combiner-cli-*.deb | Linux CLI package | System installation |
          | manga-combiner-cli-*.msi | Windows CLI installer | System installation |
          | manga-combiner-cli-portable-*-windows.zip | Windows portable CLI | Extract and run |
          | MangaCombiner-*.dmg | macOS desktop app | Drag to Applications |
          | MangaCombiner-*.msi | Windows desktop app | Double-click to install |
          | MangaCombiner-*.deb | Linux desktop app | System package |
          | manga-combiner-kmp-release.aab | Android app bundle | Play Store upload |
          | manga-combiner-kmp-release-unsigned.apk | Android APK | Manual installation |
          EOF_MARKER

      - name: Create GitHub Release with Enhanced File Collection
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/CLI-Linux-*/**/*.jar
            artifacts/CLI-*/**/*.deb
            artifacts/CLI-*/**/*.msi
            artifacts/CLI-*/**/*.zip
            artifacts/Desktop-*/**/*.dmg
            artifacts/Desktop-*/**/*.msi
            artifacts/Desktop-*/**/*.deb
            artifacts/Android-*/**/*.apk
          body_path: release_notes.md
          draft: false
          prerelease: false
          generate_release_notes: true
          make_latest: true
          fail_on_unmatched_files: false
